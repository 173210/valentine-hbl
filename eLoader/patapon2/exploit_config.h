#ifndef EXPLOIT_CONFIG
#define EXPLOIT_CONFIG

//Where to load hbl.bin in Ram
// Has to be a place not occupied by the game
// a correct address can be found in an exploit with a call to sce_alloc
#define HBL_LOAD_ADDRESS 0x09EC8000

// Addresses where the threads to delete are defined
// can be found with psplink (thlist, then ... ?)
#define TH_ADDR_LIST {0x08B46140,0x08C38224,0x08C32174,0x08C2C0C4,0x08C26014,0x08B465E4, 0x08B7BBF4, 0x08B44C28}

//Addresses where the event flags to delete can be found
//psplink evlist
#define EV_ADDR_LIST {0x08B46634, 0x08B465F4, 0x08B7BC00}

//Addresses where the semaphores to delete can be found
//psplink semalist
#define SEMA_ADDR_LIST {0x08C3822C, 0x08C38228, 0x08C3217C, 0x08C32178, 0x08C2C0CC, 0x08C2C0C8, 0x08C2601C, 0x08C26018, 0x08B4656C, 0x08B46594, 0x08B46630, 0x08B465F0, 0x08B465EC, 0x08B465E8, 0x08B4612C, 0x08C24C90, 0x08C24C60, 0x09E658C8, 0x09E641C4, 0x09E640B4, 0x08B7BC18, 0x08B64AB0, 0x08B64AA4, 0x08B64A98, 0x08B64A8C, 0x08B64A80, 0x08B64A74, 0x08B64A68}

// Define to Free the game module (e.g. minna no golf)
//#define GAME_FREEMEM_ADDR 0x08D047C0

// Define to free additional modules (net modules, etc...) (e.g. patapon2 demo)
#define UNLOAD_ADDITIONAL_MODULES

//Define if sceUtilityMsgDialog* are imported by the game
#define  HAS_SCE_UTILITY_MSD_DIALOG


//Firmware Detection
//DETECT_FIRMWARE_ADDR is the address in Ram to look for
// The others are the value one should expect at this address
// We obviously want to look at an address that is constant for any given firmware, but different for 2 different firmwares
// Such an address (if it exists) can be found by comparing a good amount of user mem dumps
// Don't define DETECT_FIRMWARE_ADDR if you have no way to find the firmware
// Don't define a specific firmware value if you don't know it
#define DETECT_FIRMWARE_ADDR 0x09E7b68c
#define DETECT_FIRMWARE_500 0xB533E9FC
#define DETECT_FIRMWARE_503 0x4CFA7F33
#define DETECT_FIRMWARE_550 0xA67D3F99
#define DETECT_FIRMWARE_551 0x67D3F99F
#define DETECT_FIRMWARE_555 0xCFA7F33F
#define DETECT_FIRMWARE_570 0xC5B13597
#define DETECT_FIRMWARE_600 0x22B5CE0D
#define DETECT_FIRMWARE_610 0x32A80E1B
#define DETECT_FIRMWARE_620 0x73880F1B



// Syscall estimation

// For which firmware versions is perfect syscall estimation available?
#define SYSCALLS_KNOWN_FOR_FIRMWARES { 500, 503, 550, 551, 555, 570, 600, 610 }
#define SYSCALLS_KNOWN_FOR_GO_FIRMWARES { 570, 610, 620 }

// Reference library for syscall estimation, all syscalls for this library must be known
#define SYSCALL_REFERENCE_LIBRARY "sceOpenPSID"

// Syscall offsets, must be defined for all firmwares in SYSCALLS_KNOWN_FOR_FIRMWARES
#define SYSCALL_OFFSETS_500     { 0, 9, 152, 163, 200, 221, 243, 249, 293, 302, 320, 367, 394, 417, 433, 445, 503, 518, 572, 586, 748, 729, 545, 878 }
#define SYSCALL_OFFSETS_500_CFW { 0, 9, 152, 163, 200, 260, 282, 288, 332, 341, 359, 406, 433, 456, 472, 484, 542, 557, 611, 625, 807, 788, 584, 937 }

#define SYSCALL_OFFSETS_550     { 0, 9, 152, 163, 200, 222, 244, 250, 294, 303, 321, 368, 395, 418, 434, 446, 504, 519, 573, 587, 750, 731, 546, 880 }
#define SYSCALL_OFFSETS_550_CFW { 0, 9, 152, 163, 200, 261, 283, 289, 333, 342, 360, 407, 434, 457, 473, 485, 543, 558, 612, 626, 809, 790, 585, 939 }

#define SYSCALL_OFFSETS_570    { 0, 9, 161, 172, 209, 231, 254, 260, 308, 317, 335, 382, 409, 432, 452, 464, 522, 537, 590, 604, 769, 750, 563, (999) }
#define SYSCALL_OFFSETS_570_GO { 0, 9, 161, 172, 209, 231, 254, 260, 308, 317, 335, 382, 409, 432, 452, 464, 522, 537, 590, 604, 885, 866, 563, 1018 }

#define SYSCALL_OFFSETS_600    { 0, 9, 160, 171, 208, 230, 255, 261, 309, 318, 336, 484, 383, 406, 511, 426, 523, 538, 592, 606, 794, 772, 564, 927 }
#define SYSCALL_OFFSETS_600_GO { 0, 9, 160, 171, 208, 230, 255, 261, 309, 318, 336, 484, 383, 406, 511, 426, 523, 538, 592, 606, 906, 884, 564, (1039) }


// Kernel memory dump offsets for the PSP GO
#define SYSCALL_KERNEL_OFFSETS_620 { 0x0002094C, 0x000208FC, 0x000207BC, 0x0002071C, 0x000205DC, 0x000204EC, 0x0002049C, 0x0002044C, 0x000203AC, 0x0002B420, 0x0002B0D8, 0x000F8010, 0x0002A8F8, 0x000BEDA0, 0x0015A9A0, 0x000BE858, 0x0015A670, 0x00159E00, 0x001E6408, 0x001E5CD0, 0x0026A4D0, 0x0025B3A0, 0x001889A0 }
#define SYSCALL_KERNEL_OFFSETS_630 { } // Not available


#endif