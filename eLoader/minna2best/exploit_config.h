#ifndef EXPLOIT_CONFIG
#define EXPLOIT_CONFIG

//Where to load hbl.bin in Ram
// Has to be a place not occupied by the game
// a correct address can be found in an exploit with a call to sce_alloc
#define HBL_LOAD_ADDRESS 0x09EB0000

// Addresses where the threads to delete are defined
// can be found with psplink (thlist, then ... ?)
#define TH_ADDR_LIST { 0x09FFEC00, 0x08B39548, 0x08BB5504, 0x08DC5CA4, 0x08DCBD54, 0x08DD1E04, 0x08DD7EB4, 0x08BB5060 }

//Addresses where the event flags to delete can be found
//psplink evlist
#define EV_ADDR_LIST { 0x08BB5514, 0x08BB5550 }

//Addresses where the semaphores to delete can be found
//psplink semalist
#define SEMA_ADDR_LIST { 0x08E1DE30, 0x08E26DB0, 0x08BB504C, 0x08BB5508, 0x08BB550C, 0x08BB5510, 0x08BB554C, 0x08BB54B4, 0x08BB548C, 0x08DC5CA8, 0x08DC5CAC, 0x08DCBD58, 0x08DCBD5C, 0x08DD1E08, 0x08DD1E0C, 0x08DD7EB8, 0x08DD7EBC }

// Define to Free the game module (e.g. minna no golf)
#define GAME_FREEMEM_ADDR 0x08B395C0

// Define to free additional modules (net modules, etc...) (e.g. patapon2 demo)
#define UNLOAD_ADDITIONAL_MODULES


//Firmware Detection
//DETECT_FIRMWARE_ADDR is the address in Ram to look for
// The others are the value one should expect at this address
// We obviously want to look at an address that is constant for any given firmware, but different for 2 different firmwares
// Such an address (if it exists) can be found by comparing a good amount of user mem dumps
// Don't define DETECT_FIRMWARE_ADDR if you have no way to find the firmware
// Don't define a specific firmware value if you don't know it
#define DETECT_FIRMWARE_ADDR 0x08800B6C
#define DETECT_FIRMWARE_550 0x00000000
#define DETECT_FIRMWARE_600 0x06000010
#define DETECT_FIRMWARE_610 0x06010010
#define DETECT_FIRMWARE_620 0x06020010
#define DETECT_FIRMWARE_630 0x06030010
#define DETECT_FIRMWARE_631 0x06030110



// Syscall estimation

// All golf games share the same syscall data
#include "../minna2/exploit_syscalls.h"

#endif
