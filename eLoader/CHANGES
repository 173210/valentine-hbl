2010/04/17 (wololo)
- This change requires a new Save Game file (changed the address where h.bin is loaded). Regenerate the Save Game by yourself (codes in the folder SDK) or get it at http://wololo.net/wagic
- Code to unload the module "Labo". The code works, but it basically breaks compatibility with all the homebrews I tested, so right now I commented the code out.
To activate it, define the macro "UNLOAD_MODULE" in eLoader.h


2010/04/17 (wololo)
- Experimental!!! firmware detection mechanism. No need to rename libs_5xx and libs_6xx, as well as imports.config_* : the HBL automatically loads the "correct" one

2010/04/16 (ultimakillz)
- Added new imports.config files for 5.0x, 5.5x, 5.70 and 6.20 (PSP Go) versions (thanks to ultimakillz)

2010/04/14 (m0skit0)
- Fixed nidtohuman tool Makefile
- Added a very very very simple syscall reestimation function

2010/04/13 (m0skit0)
- Fixed buffer overflow in estimate_syscall() (issue 14)
- Fixed ELF path (issue 13)
- Separate imports.config for 5XX and 6XX. Rename to imports.config
- Added 2 more tools: a processor to make NID table dumps more readable and a user memory dumper (useful for 6.20)

2010/04/12 (m0skit0)
- Added more .lib.stubs sections to imports.config
- Added code to HBL process any number of .lib.stubs defined in imports.config
--> eLoaderconf.rb broken, wololo please fix it
- Added more functions and a lot of order to sdk_loader.S
- Moved get_library_entry() from syscall.c to eloader.c
- Added a new directory with tools for HBL development
- Added NIDSPRX tool by arisma
- Added whole GPLv3 to LICENSE
- This changes should improve syscall estimation :)
--> Need more .nids files for the new libraries

2010/04/10 (wololo)
- All files except h.bin now NEED TO BE PUT in a "hbl" folder at the root of the memstick
-- this can be changed in the code by modifying HBL_ROOT
- simplified the "menu/no menu" choice from a user's perspective (since the menu seems to be not working for lots of people):
-- if a "ms0:/hbl/game/EBOOT.PBP" file exists, it will be launched, otherwise the menu is launched

2010/04/08 (m0skit0)
- Changed imports.config structure (check config.h for new structure)
- Changed config.c library to suit new file structure (also fixed some old bugs)
- Some code cleaning (i.e. moved reestimate_syscall() to syscall.c)
- Disabled return to HBL menu on homebrew exit
- Adjusted MAX_LIBRARY_EXPORTS to 160.

2010/04/07 (wololo)
- small menu improvements
- shortened the delay for free mem ("free memory" step goes faster)
- dblog is deleted everytime the HBL is started

2010/04/06 (wololo)
- adding output to the screen while HBL loads
- putting back my fakemem mechanism so that T.O.M.E runs. To deactivate it, comment out the "define FAKEMEM"
-- that fakemem system is of course temporary until we can actually free the ram

2010/04/04 (wololo)
- Adding a very basic menu
- Put back the exit_with_log if thread not found, feel free to revert that change

2010/04/04 (ab5000)
- Still very unstable (Wagic crashes and T.O.M.E. gives "core() error")
- Added malloc.c and malloc.h
- Now relocate_sections reads the whole section in a dinamically allocated buffer
--> Now relocation is A LOT faster! :)
--> T.O.M.E. takes about 15 seconds to start (debug enabled)
--> Wagic takes about 1 minute to start (debug enabled)
- Now loader allocates HBL stubs using PSP_SMEM_High because homebrew was overwriting them
--> We need to unload Labo and use PSP_SMEM_Low so they'll be BEFORE the homebrew!
--> We also need to make HBL relocatable!
- Added a bit of debug to find_thread
- Added a bit of debug to relocate_sections
- Moved hardcoded scratchpad addresses to scratchpad.h
--> They are still hardcoded in sdk_hbl.S, someone knows how to use a C defines in ASM?

2010/04/03
- Still doesn't work!!!
--> It crashes in sgx-psp-freq-thr thread when freeing memory
--> Threads aren't found (why???) and aren't terminated
--> So when HBL frees semaphores/event flags the thread crashes
- Now AddNID in sdk_hbl.S use $v0 instead of $fp
--> This fixes sceSystemMemoryManager crash in revision 10 :)

2010/04/03
- This revision doesn't work!!!
--> Crash in sceSystemMemoryManager (???) when resolving homebrew imports
- Added sceKernelAllocPartitionMemory
- Now the loader allocates memory for HBL
- Now HBL allocates memory for the homebrew
- Removed hooks from sceKernelAllocPartitionMemory, sceKernelGetBlockHeadAddr and sceKernelGetMaxFreeMemSize
--> Now the homebrew can use the whole free memory :-)
- Fixed a bug in loader.c that was causing crashes
--> In search_game_stubs, stub_list wasn't completely zeroed
- Fixed "CANNOT FIND THREAD TO DELETE" bug (HBL now doesn't exit)
--> We still need a proper fix!

2010/03/31
- Added sceKernelReferEventFlagStatus
- Added sceKernelDeleteEventFlag
--> imports.config and loader are changed, so remember to use the new ones when testing!
- Added find_evflag (thread.c)
- Added event flags, remaining semaphores and UserSbrk address to memory.c
--> Now we have 0x1410400 free bytes (20 Megabytes) :-)

2010/03/19
- Added code for stopping and unloading the game module, but it crashes on sceKernelStopModule

ï»¿2010/03/13
- Attempt at fixing misaligned relocations

2010/03/07
- Fixed issue with relocated EBOOT.PBP :)

2010/03/07
- fixed the return value of prx_load_program in elf.c.
--> prx loading now works. To try, add BUILD_PRX=1 to the hello/Makefile, and copy eboot.prx to eboot.elf on the root of the memstick
--> Still doesn't work from EBOOT, there's a problem with the offset, needs investigation

04/03/2010
- Added a new config file (file structure on config.h) to move there some game information
- Implemented a library for easy interfacing with config file
- Added code for loader to handle the config file, thus resolving HBL imports that exist on game
- Added code for HBL to handle the config file, thus estimating own imports that the loader couldn't resolve

Last changes:
- Added a loader that loads HBL on scratchpad instead of game region
- HBL loader now also copies stubs used by HBL to scratchpad
- Added a new data structure (tSceLibrary) and subsituted estimate_syscall() with a new implementation
